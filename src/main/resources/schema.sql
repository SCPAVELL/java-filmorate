CREATE TABLE IF NOT EXISTS "USERS" (
	USER_ID BIGINT NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING(256) NOT NULL,
	LOGIN CHARACTER VARYING(32) NOT NULL,
	NAME CHARACTER VARYING(256),
	BIRTHDAY DATE,
	CONSTRAINT USER_PK PRIMARY KEY (USER_ID)
);


CREATE TABLE IF NOT EXISTS FRIENDS (
	USER_ID BIGINT NOT NULL,
	FRIEND_USER_ID BIGINT NOT NULL,
	CONFIRMED BOOLEAN
);

CREATE TABLE IF NOT EXISTS MPA (
	MPA_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(8),
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);

CREATE TABLE IF NOT EXISTS GENRES (
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(256),
	CONSTRAINT GENRE_PK PRIMARY KEY (GENRE_ID)
);

CREATE TABLE IF NOT EXISTS FILM_GENRES (
	FILM_ID BIGINT NOT NULL,
	GENRE_ID INTEGER NOT NULL,
    PRIMARY KEY (FILM_ID, GENRE_ID)
);
CREATE INDEX IF NOT EXISTS FILM_GENRES_FILM_FK_INDEX_4 ON FILM_GENRES (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_GENRES_GENRE_FK_INDEX_4 ON FILM_GENRES (GENRE_ID);


CREATE TABLE IF NOT EXISTS FILMS (
	FILM_ID BIGINT NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(256) NOT NULL,
	DESCRIPTION CHARACTER VARYING(2048),
	RELEASE_DATE DATE NOT NULL,
	DURATION BIGINT,
	MPA_ID INTEGER,
	CONSTRAINT FILM_PK PRIMARY KEY (FILM_ID)
);

CREATE TABLE IF NOT EXISTS DIRECTORS (
    DIRECTOR_ID BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
    NAME VARCHAR(256)
);

CREATE TABLE IF NOT EXISTS FILM_DIRECTORS (
    FILM_ID BIGINT NOT NULL,
    DIRECTOR_ID BIGINT NOT NULL,
    PRIMARY KEY (FILM_ID, DIRECTOR_ID)
);
CREATE INDEX IF NOT EXISTS FILM_DIRECTORS_FILM_FK_INDEX_20 ON FILM_DIRECTORS (FILM_ID);
CREATE INDEX IF NOT EXISTS FILM_DIRECTORS_DIRECTOR_FK_INDEX_21 ON FILM_DIRECTORS (DIRECTOR_ID);

CREATE TABLE IF NOT EXISTS LIKES (
	FILM_ID BIGINT NOT NULL,
	USER_ID BIGINT NOT NULL,
    PRIMARY KEY (FILM_ID, USER_ID)
);
CREATE INDEX IF NOT EXISTS LIKES_FILM_FK_INDEX_4 ON LIKES (FILM_ID);
CREATE INDEX IF NOT EXISTS LIKES_USER_FK_INDEX_4 ON LIKES (USER_ID);

CREATE TABLE IF NOT EXISTS REVIEWS (
	REVIEW_ID BIGINT NOT NULL AUTO_INCREMENT,
	CONTENT CHARACTER VARYING(2048) NOT NULL,
	POSITIVE BOOLEAN,
	USER_ID BIGINT NOT NULL,
	FILM_ID BIGINT NOT NULL,
	CONSTRAINT REVIEWS_PK PRIMARY KEY (REVIEW_ID)
);
CREATE UNIQUE INDEX IF NOT EXISTS PRIMARY_KEY_6 ON REVIEWS (REVIEW_ID);

CREATE TABLE IF NOT EXISTS REVIEW_LIKES (
	REVIEW_ID BIGINT NOT NULL,
	USER_ID BIGINT NOT NULL,
    PRIMARY KEY (REVIEW_ID, USER_ID)
);
CREATE INDEX IF NOT EXISTS REVIEW_LIKES_REVIEW_FK_INDEX_7 ON REVIEW_LIKES (REVIEW_ID);
CREATE INDEX IF NOT EXISTS REVIEW_LIKES_USER_FK_INDEX_8 ON REVIEW_LIKES (USER_ID);


CREATE TABLE IF NOT EXISTS REVIEW_DISLIKES (
	REVIEW_ID BIGINT NOT NULL,
	USER_ID BIGINT NOT NULL,
    PRIMARY KEY (REVIEW_ID, USER_ID)
);
CREATE INDEX IF NOT EXISTS REVIEW_DISLIKES_REVIEW_FK_INDEX_7 ON REVIEW_DISLIKES (REVIEW_ID);
CREATE INDEX IF NOT EXISTS REVIEW_DISLIKES_USER_FK_INDEX_8 ON REVIEW_DISLIKES (USER_ID);

CREATE TABLE IF NOT EXISTS "EVENTS"
(
    EVENT_ID   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_ID    BIGINT,
    ENTITY_ID  BIGINT,
    TIMESTAMP  BIGINT,
    EVENT_TYPE VARCHAR(6),
    OPERATION  VARCHAR(6)
);

ALTER TABLE EVENTS
    ADD CONSTRAINT IF NOT EXISTS EVENTS_USER_ID
        FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE EVENTS
    ADD CONSTRAINT IF NOT EXISTS check_event_type CHECK (EVENT_TYPE) in ('LIKE', 'REVIEW', 'FRIEND');

ALTER TABLE EVENTS
    ADD CONSTRAINT IF NOT EXISTS check_operation CHECK (OPERATION) in ('REMOVE', 'ADD', 'UPDATE');

ALTER TABLE LIKES
    ADD CONSTRAINT IF NOT EXISTS LIKES_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE LIKES
    ADD CONSTRAINT IF NOT EXISTS LIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE FRIENDS
    ADD CONSTRAINT IF NOT EXISTS FRIENDS_USER_FK FOREIGN KEY (USER_ID) REFERENCES "USERS"(USER_ID) ON DELETE CASCADE;

ALTER TABLE FRIENDS
    ADD CONSTRAINT IF NOT EXISTS FRIENDS_FRIEND_USER_FK FOREIGN KEY (FRIEND_USER_ID) REFERENCES "USERS"(USER_ID) ON DELETE CASCADE;

ALTER TABLE FILM_GENRES
    ADD CONSTRAINT IF NOT EXISTS FILM_GENRES_GENRE_FK FOREIGN KEY (GENRE_ID) REFERENCES GENRES(GENRE_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE FILM_GENRES
    ADD CONSTRAINT IF NOT EXISTS FILM_GENRES_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE FILMS
    ADD CONSTRAINT IF NOT EXISTS FILM_MPA_FK FOREIGN KEY (MPA_ID) REFERENCES MPA(MPA_ID);

ALTER TABLE REVIEWS
    ADD CONSTRAINT IF NOT EXISTS REVIEWS_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE;

ALTER TABLE REVIEWS
    ADD CONSTRAINT IF NOT EXISTS REVIEWS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE;

ALTER TABLE REVIEW_LIKES
    ADD CONSTRAINT IF NOT EXISTS REVIEW_LIKES_REVIEW_FK FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS(REVIEW_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE REVIEW_LIKES
    ADD CONSTRAINT IF NOT EXISTS REVIEW_LIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE REVIEW_DISLIKES
    ADD CONSTRAINT IF NOT EXISTS REVIEW_DISLIKES_REVIEW_FK FOREIGN KEY (REVIEW_ID) REFERENCES REVIEWS(REVIEW_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE REVIEW_DISLIKES
    ADD CONSTRAINT IF NOT EXISTS REVIEW_DISLIKES_USER_FK FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE FILM_DIRECTORS
    ADD CONSTRAINT IF NOT EXISTS FILM_DIRECTORS_FILM_FK FOREIGN KEY (FILM_ID) REFERENCES FILMS(FILM_ID) ON DELETE CASCADE ON UPDATE RESTRICT;

ALTER TABLE FILM_DIRECTORS
    ADD CONSTRAINT IF NOT EXISTS FILM_DIRECTORS_DIRECTOR FOREIGN KEY (DIRECTOR_ID) REFERENCES DIRECTORS(DIRECTOR_ID) ON DELETE CASCADE ON UPDATE RESTRICT;